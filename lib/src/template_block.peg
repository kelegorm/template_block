%{
part of template_block;

}%

{
TemplateBlock _template;

List<_TemplateLine> parse(TemplateBlock template) {
  _template = template;
  var result = parse_template();
  if (!success) {
    if(!expected.isEmpty) {
      var str = expected.map((s) => toPrintable(s)).join('\', \'');
      throw 'Parser error at ($line, $column): expected \'$str\' but found \'$unexpected\'';
    } else {
      if(!unexpected.isEmpty) {
        throw 'Parser error at ($line, $column): unexpected "${toPrintable(unexpected)}"';
      } else {
        throw 'Parser error at ($line, $column): unexpected end of file';
      }
    }
  }
  return result;
}

_TemplateMultiLine _addMultiLine(List prefix, String key, List suffix) {
  var line = new _TemplateMultiLine(_template);
  line._prefix = prefix.join();
  line._suffix = suffix.join();
  line._value = _template._addKey('#$key');
  return line;
}

_TemplateSingleLine _addSingleLine(List parts) {
  var line = new _TemplateSingleLine(_template);
  line._parts = parts;
  return line;
}

}

template <-
  ((LAST_LINE / multiLine / singleLine / EMPTY_LINE) (NEW_LINE !EOF)? { $$ = $1; } )* EOF { $$ = $1; }

multiLine <-
  multiLinePrefix* MULTI_LINE_KEY multiLineSuffix* { $$ = _addMultiLine($1, $2, $3); }

multiLinePrefix <-
  !MULTI_LINE_KEY !NEW_LINE . { $$ = $3; } 

multiLineSuffix <-
  !NEW_LINE . { $$ = $2; }

singleLine <-
  singleLineParts { $$ = _addSingleLine($1); }

singleLineParts <-
  (SINGLE_LINE_KEY / singleLinePart)+

singleLinePart <-
  !SINGLE_LINE_KEY !NEW_LINE . { $$ = $3; }

# Tokens

IDENT <-
  IDENT_START IDENT_CONT* { $$ = _flatten([$1, $2]).join(); }

IDENT_START <-
  [a-zA-Z] / '_'

IDENT_CONT <-
  [a-zA-Z0-9] / '_'

EMPTY_LINE <-
  &NEW_LINE { $$ = _addSingleLine(const [""]); }

EOF <-
  !.

LAST_LINE <-
  NEW_LINE &EOF { $$ = _addSingleLine(const [""]); }

MULTI_LINE_KEY <-
  '{{#' IDENT '}}' { $$ = $2; }

NEW_LINE <-
  '\n'
  / '\r\n'
  / '\r'
  
SINGLE_LINE_KEY <-
  '{{' IDENT '}}' { $$ = _template._addKey($2); }
