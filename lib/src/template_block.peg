%{
part of template_block;

}%

{
TemplateBlock _template;

List<_TemplateLine> parse(TemplateBlock template) {
  _template = template;
  var result = parse_template();
  if (!success) {
    if(!expected.isEmpty) {
      var str = expected.map((s) => Strings.printable(s)).join('\', \'');
      throw 'Parser error at ($line, $column): expected \'$str\' but found \'$unexpected\'';
    } else {
      if(!unexpected.isEmpty) {
        throw 'Parser error at ($line, $column): unexpected "${Strings.printable(unexpected)}"';
      } else {
        throw 'Parser error at ($line, $column): unexpected end of file';
      }
    }
  }
  return result;
}

_TemplateMultiLine _addMultiLine(List prefix, String key, List suffix) {
  var line = new _TemplateMultiLine(_template);
  line._prefix = prefix.join();
  line._suffix = suffix.join();
  line._value = _template._addKey('#$key');
  return line;
}

_TemplateSingleLine _addSingleLine(List parts) {
  var line = new _TemplateSingleLine(_template);
  line._parts = parts;
  return line;
}

}

template <-
  ((lastLine / multiLine / singleLine / emptyLine) (NEW_LINE !EOF)? { $$ = $1; } )* EOF { $$ = $1; }

lastLine <-
  NEW_LINE &EOF { $$ = _addSingleLine(const [""]); }

multiLine <-
  multiLinePrefix* multiLineKey multiLineSuffix* { $$ = _addMultiLine($1, $2, $3); }

multiLinePrefix <-
  !multiLineKey !NEW_LINE . { $$ = $3; } 

multiLineKey <-
  '{{#' IDENT '}}' { $$ = $2; }

multiLineSuffix <-
  !NEW_LINE . { $$ = $2; }

singleLine <-
  singleLineParts { $$ = _addSingleLine($1); }

singleLineParts <-
  (singleLineKey / singleLinePart)+

singleLineKey <-
  '{{' IDENT '}}' { $$ = _template._addKey($2); }
  
singleLinePart <-
  !singleLineKey !NEW_LINE . { $$ = $3; }

emptyLine <-
  &NEW_LINE { $$ = _addSingleLine(const [""]); }

EOF <-
  !.

IDENT <-
  IDENT_START IDENT_CONT* { $$ = _flatten([$1, $2]).join(); }

IDENT_START <-
  [a-zA-Z] / '_'

IDENT_CONT <-
  [a-zA-Z0-9] / '_'

NEW_LINE <-
  '\n'
  / '\r\n'
  / '\r'
  